# -*- coding: utf-8 -*-
"""Copy of Minor Project - Crop Yield Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/186bMKnNRrI7ID6kzQ70Yswn6KIrRnu8e
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
!pip install regressormetricgraphplot
from regressormetricgraphplot import CompareModels
!pip install scipy

df = pd.read_csv('/content/yield_df.csv')

df.head()

"""Data Preprocessing"""

df.drop('Unnamed: 0',axis=1,inplace=True)
df.head()

df.shape

df.info()

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace = True)

df.duplicated().sum()

#boxplot - outlier detection
sns.boxplot(data=df, x=df["pesticides_tonnes"])
plt.title("Boxplot of Pesticides. ")

sns.boxplot(data=df, x=df["hg/ha_yield"])
plt.title("Boxplot of Yield. ")

sns.boxplot(data=df, y=df["average_rain_fall_mm_per_year"])
plt.title("Boxplot of Rainfall. ")

sns.boxplot(data=df, y=df["avg_temp"])
plt.title("Boxplot of Temperature. ")

"""Scatter Plot"""

#Average yield vs. average temperature

import matplotlib.pyplot as plt
sns.scatterplot(data=df, x="avg_temp", y="hg/ha_yield", hue="Item")
_ = plt.title("Average yield vs. average temperature")

sns.regplot(x="hg/ha_yield", y= "pesticides_tonnes", data=df, scatter_kws={'alpha': 0.4})

sns.regplot(x="hg/ha_yield", y= "average_rain_fall_mm_per_year", data=df, scatter_kws={'alpha': 0.4})

#  Rainfall vs Temperature
import matplotlib.pyplot as plt
plt.scatter(df['avg_temp'], df['average_rain_fall_mm_per_year'], c=df['Year'], cmap='viridis')
plt.xlabel('Average Temperature')
_ = plt.ylabel('Average Rainfall (mm)')

# Pesticide Use vs Average Temperature

import matplotlib.pyplot as plt
plt.scatter(df['pesticides_tonnes'], df['avg_temp'], c=df['avg_temp'])
plt.xlabel('Pesticide Use (tonnes)')
_ = plt.ylabel('Average Temperature (Â°C)')

df.hist(figsize=(15,8))

plt.figure(figsize=(15,8));
sns.countplot(x=df.Area,palette="mako");
plt.xticks(rotation=-90);
plt.show()

numerical_columns = ['hg/ha_yield', 'average_rain_fall_mm_per_year', 'pesticides_tonnes', 'avg_temp']

for column in numerical_columns:
    pivot_table = df.pivot_table(index='Item', columns='Year', values=column)
    plt.figure(figsize=(10, 6))
    sns.heatmap(pivot_table, annot=False, cmap='YlGnBu', linewidths=.5)
    plt.title(f"Heatmap of {column}")
    plt.xlabel('Year')
    plt.ylabel('Items')
    plt.xticks(rotation=45)
    plt.show()

"""## Transforming average_rain_fall_mm_per_year"""

def isStr(obj):
    try:
        float(obj)
        return False
    except:
        return True
to_drop = df[df['average_rain_fall_mm_per_year'].apply(isStr)].index

df = df.drop(to_drop)

df

df['average_rain_fall_mm_per_year'] = df['average_rain_fall_mm_per_year'].astype(np.float64)

"""# Graph Frequency vs Area"""

len(df['Area'].unique())

plt.figure(figsize=(25,25))
sns.countplot(y=df['Area'])
plt.show()

(df['Area'].value_counts() < 500).sum()

"""# yield_per_country"""

country = df['Area'].unique()
yield_per_country = []
for state in country:
    yield_per_country.append(df[df['Area']==state]['hg/ha_yield'].sum())

df['hg/ha_yield'].sum()

yield_per_country

"""# Yield Per Country Graph"""

plt.figure(figsize=(15, 15))
sns.barplot(y=country, x=yield_per_country)

"""# Graph Frequency vs Item"""

df.groupby('Item').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

"""# Yield vs Item"""

crops = df['Item'].unique()
yield_per_crop = []
for crop in crops:
    yield_per_crop.append(df[df['Item']==crop]['hg/ha_yield'].sum())

sns.barplot(y=crops,x=yield_per_crop)

"""# Train Test split rearranging columns"""

col = ['Year', 'average_rain_fall_mm_per_year','pesticides_tonnes', 'avg_temp', 'Area', 'Item', 'hg/ha_yield']
df = df[col]
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

df.head(3)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0, shuffle=True)

"""# Converting Categorical to Numerical and Scaling the values"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
ohe = OneHotEncoder(drop='first')
scale = StandardScaler()

preprocesser = ColumnTransformer(
        transformers = [
            ('StandardScale', scale, [0, 1, 2, 3]),
            ('OHE', ohe, [4, 5]),
        ],
        remainder='passthrough'
)

X_train_dummy = preprocesser.fit_transform(X_train)
X_test_dummy = preprocesser.transform(X_test)

preprocesser.get_feature_names_out(col[:-1])

"""# ML Models :
# 1. Linear Regression
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error,mean_absolute_percentage_error
from math import sqrt
def root_mean_squared_error(y_test,y_pred):
  rmse = sqrt(mean_squared_error(y_test, y_pred))
  return rmse
def r_coeff(y_test,y_pred):
  r= np.corrcoef(y_test, y_pred)
  return r
plot = CompareModels()
linear_reg = LinearRegression()
linear_reg.fit(X_train_dummy,y_train)
y_pred = linear_reg.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Linear Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 2. Gradient Boosting Regressor

"""

from sklearn.ensemble import HistGradientBoostingRegressor
gb = HistGradientBoostingRegressor()
gb.fit(X_train_dummy.toarray(),y_train)
y_pred = gb.predict(X_test_dummy.toarray())


print(f" R (Pearson Coefficient ) : {r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Gradient Boosting Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 3. Ridge Regression"""

from sklearn.linear_model import Ridge
ridge_reg = Ridge()
ridge_reg.fit(X_train_dummy,y_train)
y_pred = ridge_reg.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Ridge Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 4.Lasso Regression"""

from sklearn.linear_model import Lasso
lasso_reg = Lasso()
lasso_reg.fit(X_train_dummy,y_train)
y_pred = lasso_reg.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Lasso Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 5. K Neighbours Regression"""

from sklearn.neighbors import KNeighborsRegressor
kn_reg = KNeighborsRegressor()
kn_reg.fit(X_train_dummy,y_train)
y_pred = kn_reg.predict(X_test_dummy)
print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'K Neighbours Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 6.Decision Tree Regression"""

from sklearn.tree import DecisionTreeRegressor
dt_reg = DecisionTreeRegressor()
dt_reg.fit(X_train_dummy,y_train)
y_pred = dt_reg.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Decision Tree Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 7.Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
rf_reg = RandomForestRegressor(n_estimators=10, random_state=0, oob_score=True)
rf_reg.fit(X_train_dummy,y_train)
y_pred = rf_reg.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Random Forest Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# 8. Support Vector Regression"""

from sklearn.svm import SVR
svr = SVR(kernel = 'rbf')
svr.fit(X_train_dummy,y_train)
y_pred = svr.predict(X_test_dummy)


print(f" R (Pearson Coefficient ) : { r_coeff(y_test,y_pred)} \n R2 Score : {r2_score(y_test,y_pred)} \n Root Mean Squared Error : {root_mean_squared_error(y_test,y_pred)} \n Mean Absolute Error : {mean_absolute_error(y_test,y_pred)} \n Mean Absolute Percentage Error :{mean_absolute_percentage_error(y_test,y_pred)}  ")
CompareModels.R2AndRMSE(y_test=y_test, y_pred=y_pred)
plot.add(model_name= 'Support Vector Regression', y_test=y_test, y_pred=y_pred)
plot.show(figsize=(10, 5))
print("\n")
plt.scatter(y_test, y_pred)
plt.xlabel('Actual yield')
plt.ylabel('Predicted yield')
plt.title('Actual vs Predicted Yield')
plt.show()
print("\n")
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Yield')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

"""# SELECT MODEL"""

rdf = RandomForestRegressor(n_estimators=10, random_state=0, oob_score=True)
rdf.fit(X_train_dummy,y_train)
rdf.predict(X_test_dummy)

"""# Predictive System"""

def prediction(Year, average_rain_fall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item):
    features = np.array([[Year, average_rain_fall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item]], dtype=object)
    transformed_features = preprocesser.transform(features)
    predicted_yield = rdf.predict(transformed_features).reshape(1, -1)
    return predicted_yield[0]
Year = 1990
average_rain_fall_mm_per_year =1485.0
pesticides_tonnes = 120.00
avg_temp = 16.37
Area = 'Angola'
Item = 'Potatoes'
result = prediction(Year, average_rain_fall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item)

result